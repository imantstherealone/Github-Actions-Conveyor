name: 'app-test'
description: 'Run tests for Python Greetings application on specified environment'

inputs:
  env_name:
    description: 'Environment name (dev, staging, preprod, prod)'
    required: true
  port:
    description: 'Service port number'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Info
      shell: bash
      run: echo "Running tests on ${{ inputs.env_name }} environment..."
    
    - name: Checkout API test framework
      uses: actions/checkout@v4
      with:
        repository: mtararujs/course-js-api-framework
        path: course-js-api-framework
    
    - name: Install deps
      shell: bash
      working-directory: course-js-api-framework
      run: npm install
    
    - name: Determine port and check service
      shell: bash
      id: port_check
      run: |
        PORT="3000" 
        if [ -n "${{ inputs.port }}" ]; then
          PORT="${{ inputs.port }}"
        elif [ "${{ inputs.env_name }}" == "staging" ]; then
          PORT="7002"
        elif [ "${{ inputs.env_name }}" == "preprod" ]; then
          PORT="7003"
        elif [ "${{ inputs.env_name }}" == "prod" ]; then
          PORT="7004"
        fi
        echo "Using port $PORT for ${{ inputs.env_name }} environment"
        echo "port=$PORT" >> $GITHUB_OUTPUT
        
        echo "Checking service on http://localhost:$PORT/greetings"
        if curl -s -f http://localhost:$PORT/greetings > /dev/null; then
          echo "Service is available at http://localhost:$PORT/greetings"
          echo "service_available=true" >> $GITHUB_OUTPUT
        else
          echo "WARNING: Service not available at http://localhost:$PORT/greetings"
          echo "service_available=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Configure test environment
      shell: bash
      working-directory: course-js-api-framework
      run: |
        PORT="${{ steps.port_check.outputs.port }}"
        
        mkdir -p config
        
        cat > config/hosts.json << EOF
        {
          "dev": {
            "host": "http://localhost:$PORT"
          },
          "staging": {
            "host": "http://localhost:$PORT"
          },
          "preprod": {
            "host": "http://localhost:$PORT"
          },
          "prod": {
            "host": "http://localhost:$PORT"
          }
        }
        EOF
        
        echo "Created hosts.json with port $PORT:"
        cat config/hosts.json
        
        REQUESTS_FILE="tests/utils/requests.js"
        if [ -f "$REQUESTS_FILE" ]; then
          echo "Modifying requests.js"
          
          cat > temp_requests.js << 'EOF_REQUESTS'
        import request from 'supertest';
        import fs from 'fs';
        import path from 'path';

        function getConfig() {
          try {
            const configPath = path.resolve('config/hosts.json');
            const configData = fs.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
          } catch (error) {
            console.error('Error reading configuration:', error.message);
            return {
              dev: { host: 'http://localhost:3000' }
            };
          }
        }


        const env = process.env.TEST_ENV || 'dev';
        const config = getConfig();
        
        if (!config[env]) {
          console.warn(`Warning: No configuration for ${env} environment, using dev`);
          config[env] = config.dev;
        }

        console.log(`Using host: ${config[env].host} for environment: ${env}`);

        export default (method, url, data, headers) => {
          return request(config[env].host)[method](url).send(data).set(headers);
        };
        EOF_REQUESTS
          
          mv temp_requests.js "$REQUESTS_FILE"
          echo "Successfully modified requests.js"
        else
          echo "Error: requests.js not found!"
        fi
        

        export TEST_ENV="${{ inputs.env_name }}"
        echo "Set TEST_ENV=$TEST_ENV"
    
    - name: Run tests
      shell: bash
      working-directory: course-js-api-framework
      run: |

        NODE_DEBUG=http npm run greetings greetings_${{ inputs.env_name }} || echo "Tests failed but continuing workflow"